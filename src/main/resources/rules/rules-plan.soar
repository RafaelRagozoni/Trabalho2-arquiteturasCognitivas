################################  CONFIGURATION ################################
watch 5
learn --off
epmem --set learning off 
#smem --off
#log --level error

sp {clone-creature
   (state <s> ^io.input-link <il>)
   (<il> ^CREATURE <creature>)
-->
   (<s> ^CREATURE (deep-copy <creature>))
   }

###################################  PLAN  ###################################
sp {propose*plan
   (state <s> ^io.output-link <ol>)
   -(<ol> ^plan <p>)
-->
   (<s> ^operator <o> + >)
   (<o> ^name create-plan)
}

sp {apply*plan
   (state <s> ^operator <o>)
   (<s> ^io.output-link <ol>)
   (<o> ^name create-plan)
-->
   (<ol> ^plan <p>)
   (<p> ^step 0)
}

sp {send*plan
    (state <s> ^io.output-link <ol>)
    (<s> ^send 1)
    (<ol> ^plan <plan>)
    (<plan> ^0 <command>)
    (<command> ^<action> <a>)
-->
    (<ol> ^<action> <a>)
    # (halt)
}
################################### GO DELIVER  ###################################
# # # Propose*move*deliver:
sp {propose*move*deliver
   (state <s> ^io.input-link <il>)
   (<s> ^CREATURE <creature>)
   (<creature> ^SENSOR.VISUAL <memory>)
   (<memory> ^ENTITY <entityInMemory>)
   (<creature> ^POSITION <creaturePosition>)
   (<creaturePosition> ^X <creaturePositionX>)
   (<creaturePosition> ^Y <creaturePositionY>)

   (<entityInMemory> ^TYPE DELIVERY)
   (<entityInMemory> ^X <entityInMemoryPositionX>)
   (<entityInMemory> ^Y <entityInMemoryPositionY>)
   (<entityInMemory> ^DISTANCE <distance> > 30)

   (<creature> ^LEAFLETS.LEAFLET <leaflet>)
   (<leaflet> ^SITUATION 1.0) 
   (<leaflet> ^ID <leafletId>)

-->
   (<s> ^operator <o> +)
   (<o> ^name moveDeliver)
   (<o> ^parameter <food>)
   (<food> ^X <entityInMemoryPositionX>)
   (<food> ^Y <entityInMemoryPositionY>)
   (<food> ^ID <leafletId>)
   }
   
# Apply*move*deliver:
# If the move operator is selected, then generate an output command to it 
sp {apply*move*deliver
   (state <s> ^operator <o>
              ^io <io>)
   (<io> ^input-link <il>)             
   (<io> ^output-link <ol>)

   (<o> ^name moveDeliver)
   (<o> ^parameter <food>)
   (<food> ^X <x>)
   (<food> ^Y <y>)

   (<s> ^CREATURE <creature>)
   (<ol> ^plan <p>)
   (<p> ^step <stepNumber>)
-->
   (<p> ^step <stepNumber> -)
   (<p> ^step (+ <stepNumber> 1))
   (<p> ^<stepNumber> <cm>)
   (<cm> ^MOVE <command>)
   (<command> ^Vel 3)
   (<command> ^VelR 3)
   (<command> ^VelL 3)
   (<command> ^X <x>)
   (<command> ^Y <y>)
}

# # Apply*move*deliver*position:
# # If the move operator is selected, then generate an output command to it 
sp {apply*move*deliver*position*update
   (state <s> ^operator <o>
              ^io <io>)
   (<io> ^input-link <il>)             
   (<io> ^output-link <ol>)

   (<o> ^name moveDeliver)
   (<o> ^parameter <food>)
   (<food> ^X <x>)
   (<food> ^Y <y>)
   (<food> ^ID <leafletId>)

   (<s> ^CREATURE <creature>)
   (<creature> ^POSITION <creaturePosition>)
   (<creaturePosition> ^X <creatureX>)
   (<creaturePosition> ^Y <creatureY>)

   (<creature> ^SENSOR.VISUAL.ENTITY <entidade>)
   (<entidade> ^TYPE DELIVERY)
   (<entidade> ^DISTANCE <distance>)
-->
   (<creaturePosition> ^X <creatureX> -)
   (<creaturePosition> ^Y <creatureY> -)
   (<creaturePosition> ^X <x>)
   (<creaturePosition> ^Y <y>)
   (<entidade> ^DISTANCE <distance> -)
   (<entidade> ^DISTANCE 0 )
}

################################### DELIVER  ###################################
# Propose*deliver*leaflet:
sp {propose*deliver*leaflet
   (state <s> ^io.input-link <il>)
   (<s> ^CREATURE <creature>)
   (<creature> ^SENSOR.VISUAL <memory>)
   (<creature> ^POSITION <creaturePosition>)

   (<creature> ^LEAFLETS.LEAFLET <leaflet>)
   (<leaflet> ^SITUATION 1.0) 
   (<leaflet> ^ID <leafletId>)
   (<leaflet> ^PAYMENT <leafletPayment>)

   (<memory> ^ENTITY <entidade>)
   (<entidade> ^TYPE DELIVERY)
   (<entidade> ^DISTANCE <distance> < 30)
-->
   (<s> ^operator <o> + =)
   (<o> ^name deliverLeaflet)
   (<o> ^ID <leafletId>)
   (<o> ^PAYMENT <leafletPayment>)
   }
   
# Apply*deliver*leaflet:
# If the move operator is selected, then generate an output command to it 
sp {apply*deliver*leaflet
   (state <s> ^operator <o>
              ^io <io>)
   (<io> ^input-link <il>)             
   (<io> ^output-link <ol>)

   (<o> ^name deliverLeaflet)
   (<o> ^ID <leafletId>)

   (<s> ^CREATURE <creature>)
   (<ol> ^plan <p>)
   (<p> ^step <stepNumber>)

   (<creature> ^LEAFLETS.LEAFLET <leaflet>)
   (<leaflet> ^SITUATION <sit>) 
   (<leaflet> ^ID <leafletId>)
-->
   (<p> ^step <stepNumber> -)
   (<p> ^step (+ <stepNumber> 1))
   (<p> ^<stepNumber> <cm>)
   (<cm> ^DELIVERY <command>)
   (<command> ^Name <leafletId>)
   (<leaflet> ^SITUATION <sit> -)
   (<leaflet> ^SITUATION 0.0)
   (<s> ^send 1)
}


###################################  WANDER  ###################################
# This operator will make the agent to walk ahead at the enviroment
# Propose*wander:
sp {propose*wander
   (state <s> ^io.input-link <il>)
   (<ss> ^superstate nil)
   (<s> ^CREATURE <creature>)
   (<creature> ^SENSOR.VISUAL <visual>)
   -(<visual> ^ENTITY <algo>)
-->
   (<ss> ^operator <o> +)
   (<o> ^name wander)}
   
# Apply*wander:
# If the wander operator is selected, then generate an output command to it 
sp {apply*wander
   (state <s> ^operator <o>
              ^io <io>)
   (<io> ^output-link <ol>)
   (<o> ^name wander)
   # -(<ol> ^MOVE <anywhere>)
   (<ol> ^plan <p>)
   (<p> ^step <stepNumber>)
   -(<s> ^send 1)
-->
   (<p> ^step <stepNumber> -)
   (<p> ^step (+ <stepNumber> 1))
   (<p> ^<stepNumber> <cm>)
   (<cm> ^MOVE <command>)
   (<s> ^send 1)
   (<command> ^Vel 0)
   (<command> ^VelR 2)
   (<command> ^VelL 0)
}
    
##############################  MOVE FOOD  #####################################
# This operator will make the agent go straight to the food

# Propose*move*food:
sp {propose*move*food
   (state <s> ^io.input-link <il>)
   (<s> ^CREATURE <creature>)
   (<creature> ^SENSOR.VISUAL <memory>)
   (<memory> ^ENTITY <entityInMemory>)
   (<creature> ^POSITION <creaturePosition>)
   (<creaturePosition> ^X <creaturePositionX>)
   (<creaturePosition> ^Y <creaturePositionY>)
   (<entityInMemory> ^TYPE FOOD)
   (<entityInMemory> ^X <entityInMemoryPositionX>)
   (<entityInMemory> ^Y <entityInMemoryPositionY>)
   (<entityInMemory> ^NAME <entityInMemoryName>) 
   (<creature> ^PARAMETERS.MINFUEL <minFuel>) 

   (<creature> ^SENSOR.FUEL <FUEL>)
   (<FUEL> ^VALUE <valueFuel> < <minFuel>)

   # -(<creature> ^LEAFLETS.LEAFLET.SITUATION 1.0) 
-->
   (<s> ^operator <o> +)
   (<o> ^name moveFood)
   (<o> ^parameter <food>)
   (<food> ^distance (sqrt (+ (* (- <creaturePositionX> <entityInMemoryPositionX>) (- <creaturePositionX> <entityInMemoryPositionX>)) (* (- <creaturePositionY> <entityInMemoryPositionY>) (- <creaturePositionY> <entityInMemoryPositionY>)))))
   (<food> ^X <entityInMemoryPositionX>)
   (<food> ^Y <entityInMemoryPositionY>)
   (<food> ^NAME <entityInMemoryName>)
   (<o> ^parameterFuel <minFuel>)}
   
# Apply*move*food:
# If the move operator is selected, then generate an output command to it 
sp {apply*move*food
   (state <s> ^operator <o>
              ^io <io>)
   (<io> ^input-link <il>)             
   (<io> ^output-link <ol>)
   (<o> ^name moveFood)
   (<o> ^parameter <food>)
   (<food> ^X <x>)
   (<food> ^Y <y>)
   (<food> ^NAME <entityInMemoryName>)
   (<s> ^CREATURE <creature>)
   (<creature> ^SENSOR.VISUAL <memory>)
   (<memory> ^ENTITY <entityInMemory>)
   (<entityInMemory> ^NAME <entityInMemoryName>)
   # -(<ol> ^EAT <something>)
    (<ol> ^plan <p>)
   (<p> ^step <stepNumber>)
-->
   (<p> ^step <stepNumber> -)
   (<p> ^step (+ <stepNumber> 1))
   (<p> ^<stepNumber> <cm>)
   (<cm> ^MOVE <command>)
   (<command> ^Vel 3)
   (<command> ^VelR 3)
   (<command> ^VelL 3)
   (<command> ^X <x>)
   (<command> ^Y <y>)
}

#Remove the food from memory because it is not there anymore 
sp {apply*moveFood*remove*food
   (state <s> ^operator <o>
            ^io.input-link <il>)
   (<o> ^name moveFood)
   (<o> ^parameter <food>)
   (<food> ^X <x>)
   (<food> ^Y <y>)
   (<s> ^CREATURE <creature>)
   (<creature> ^SENSOR.VISUAL <memory>)
   (<memory> ^ENTITY <entityInMemory>) 
   (<entityInMemory> ^X <x>)
   (<entityInMemory> ^Y <y>)      
-->
   (<memory> ^ENTITY <entityInMemory> -)}

# Apply*move*food*position:
# If the move operator is selected, then generate an output command to it 
sp {apply*move*food*position*update
   (state <s> ^operator <o>
              ^io <io>)
   (<io> ^input-link <il>)             
   (<io> ^output-link <ol>)
   (<o> ^name moveFood)
   (<o> ^parameter <food>)
   (<food> ^X <x>)
   (<food> ^Y <y>)
   (<s> ^CREATURE <creature>)

   (<creature> ^POSITION <creaturePosition>)
   (<creaturePosition> ^X <creatureX>)
   (<creaturePosition> ^Y <creatureY>)
-->
   (<creaturePosition> ^X <creatureX> -)
   (<creaturePosition> ^Y <creatureY> -)
   (<creaturePosition> ^X <x>)
   (<creaturePosition> ^Y <y>)
}
###############################  EAT FOOD  #####################################
# This operator will make the agent eat the food

# Propose*eat*food:
sp {propose*eat*food
   (state <s> ^io.input-link <il>)
   (<s> ^CREATURE <creature>)
   (<creature> ^SENSOR.VISUAL.ENTITY <entity>)
   (<entity> ^TYPE FOOD) 
   (<entity> ^DISTANCE <foodDistance> < 30)
   (<entity> ^NAME <foodName>)
   (<creature> ^SENSOR.VISUAL.ENTITY.NAME <memoryItemName> <foodName>)     
-->
   (<s> ^operator <o> +)
   (<o> ^name eatFood)
   (<o> ^parameter <food>)
   (<food> ^NAME <foodName>)
   (<food> ^DISTANCE <foodDistance>)}
   
# Apply*eat*food:
# If the move operator is selected, then generate an output command to it 
sp {apply*eat*food
   (state <s> ^operator <o>
              ^io <io>)
   (<io> ^input-link <il>)      
   (<io> ^output-link <ol>)
   (<o> ^name eatFood)
   (<o> ^parameter.NAME <foodName>)
   (<s> ^CREATURE <creature>) 
   (<creature> ^SENSOR.VISUAL <memory>)
   (<memory> ^ENTITY <memoryEntity>)
   (<memoryEntity> ^NAME <memoryEntityName> <foodName>)
   (<ol> ^plan <p>)
   (<p> ^step <stepNumber>)
-->
   (<p> ^step <stepNumber> -)
   (<p> ^step (+ <stepNumber> 1))
   (<p> ^<stepNumber> <cm>)
   (<cm> ^EAT <command>)
   (<command> ^Name <foodName>)
   (<memory> ^ENTITY <memoryEntity> -)
}

#############################  MOVE JEWEL  #####################################
# This operator will make the agent go straight to the jewel

# Propose*move*jewel:
sp {propose*move*jewel
   (state <s> ^io.input-link <il>)
   (<s> ^CREATURE <creature>)
   (<creature> ^SENSOR.VISUAL <memory>)
   (<memory> ^ENTITY <entityInMemory>)
   (<creature> ^POSITION <creaturePosition>)

   (<creature> ^LEAFLETS.JEWELS <joiaValida>)
   (<joiaValida> ^<cor> <faltante> > 0)

   (<creaturePosition> ^X <creaturePositionX>)
   (<creaturePosition> ^Y <creaturePositionY>)
   (<entityInMemory> ^TYPE JEWEL)
   (<entityInMemory> ^X <entityInMemoryPositionX>)
   (<entityInMemory> ^Y <entityInMemoryPositionY>)
   (<entityInMemory> ^NAME <entityInMemoryName>)
   (<entityInMemory> ^COLOR <cor>)

   -(<creature> ^LEAFLETS.LEAFLET.SITUATION 1.0) 

-->
   (<s> ^operator <o> +)
   (<o> ^name moveJewel)
   (<o> ^parameter <jewel>)
   (<jewel> ^distance (sqrt (+ (* (- <creaturePositionX> <entityInMemoryPositionX>) (- <creaturePositionX> <entityInMemoryPositionX>)) (* (- <creaturePositionY> <entityInMemoryPositionY>) (- <creaturePositionY> <entityInMemoryPositionY>)))))
   (<jewel> ^X <entityInMemoryPositionX>)
   (<jewel> ^Y <entityInMemoryPositionY>)
   (<jewel> ^NAME <entityInMemoryName>)
   (<jewel> ^COLOR <cor>)
   (write <cor> <faltante> )
   }
   
# Apply*move*jewel:
# If the move operator is selected, then generate an output command to it 
sp {apply*move*jewel
   (state <s> ^operator <o>
              ^io <io>)
   (<io> ^input-link <il>)           
   (<io> ^output-link <ol>)
   (<o> ^name moveJewel)
   (<o> ^parameter <jewel>)
   (<jewel> ^X <x>)
   (<jewel> ^Y <y>)
   (<jewel> ^NAME <entityInMemoryName>)
#    (<jewel> ^DISTANCE <entityInMemoryDistance>)
   (<s> ^CREATURE <creature>)
   (<creature> ^SENSOR.VISUAL <memory>)
   (<creature> ^POSITION <position>)
   (<memory> ^ENTITY <entityInMemory>)
   (<entityInMemory> ^NAME <entityInMemoryName>)
   (<entityInMemory> ^DISTANCE <entityInMemoryDistance>)
   (<position> ^X <creatureX>)
   (<position> ^Y <creatureY>)

   (<ol> ^plan <p>)
   (<p> ^step <stepNumber>)
-->
   (<p> ^step <stepNumber> -)
   (<p> ^step (+ <stepNumber> 1))
   (<p> ^<stepNumber> <cm>)
   (<cm> ^MOVE <command>)   

   (<position> ^X <creatureX> -)
   (<position> ^Y <creatureY> -)
   (<position> ^X <x>)
   (<position> ^Y <y>)
   (<entityInMemory> ^DISTANCE <entityInMemoryDistance> -)
   (<entityInMemory> ^DISTANCE 0 )

   (<command> ^Vel 3)
   (<command> ^VelR 3)
   (<command> ^VelL 3)
   (<command> ^X <x>)
   (<command> ^Y <y>)
}

##############################  GET JEWEL  #####################################
# This operator will make the agent get the jewel

# Propose*get*jewel:
sp {propose*get*jewel
   (state <s> ^io.input-link <il>)
   (<s> ^CREATURE <creature>)
   (<creature> ^SENSOR.VISUAL.ENTITY <entity>)
   (<entity> ^TYPE JEWEL) 
   (<entity> ^DISTANCE <jewelDistance> < 30)
   (<entity> ^NAME <jewelName>)
   (<creature> ^SENSOR.VISUAL.ENTITY.NAME <memoryItemName> <jewelName>)     
-->
   (<s> ^operator <o> +)
   (<o> ^name getJewel)
   (<o> ^parameter <jewel>)
   (<jewel> ^NAME <jewelName>)
   (<jewel> ^DISTANCE <jewelDistance>)}
   
# Apply*get*jewel:
# If the move operator is selected, then generate an output command to it 
sp {apply*get*jewel
   (state <s> ^operator <o>
              ^io <io>)
   (<io> ^input-link <il>)      
   (<io> ^output-link <ol>)
   (<o> ^name getJewel)
   (<o> ^parameter.NAME <jewelName>)
   (<s> ^CREATURE <creature>) 
   (<creature> ^SENSOR.VISUAL <memory>)
   (<memory> ^ENTITY <memoryEntity>)
   (<memoryEntity> ^NAME <memoryEntityName> <jewelName>)

   (<ol> ^plan <p>)
   (<p> ^step <stepNumber>)
-->
   (<p> ^step <stepNumber> -)
   (<p> ^step (+ <stepNumber> 1))
   (<p> ^<stepNumber> <cm>)
   (<cm> ^GET <command>)
   (<command> ^Name <jewelName>)
   (<memory> ^ENTITY <memoryEntity> -)

}
  
            
##################  OPERATORS PREFERENCES AND IMPASSE SOLVE  ###################

#SEE AND PROCESS ENTITY

# Move Jewel or Move Food vs See Entity
sp {moveJewel*seeEntity*preferences
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name << seeEntityWithMemoryCount seeEntityWithoutMemoryCount >>)
(<o2> ^name << moveJewel moveFood eatFood >>)
-->
(<s> ^operator <o> > <o2>)} 

# See Ententy Without Memory Preferences
sp {seeEntity*without*memory*preferences
(state <s> ^operator <o> +)
(<o> ^name << seeEntityWithMemoryCount seeEntityWithoutMemoryCount >>)
-->
(<s> ^operator <o> =)}


#JEWEL

# Move Jewel vs Get Jewel
sp {moveJewel*getJewel*preferences
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name getJewel)
(<o2> ^name << moveJewel moveFood >>)
-->
(<s> ^operator <o> > <o2>)} 

# Get Jewel vs SeeEntity
sp {getJewel*seeEntity*preferences
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name getJewel)
(<o2> ^name << seeEntityWithMemoryCount seeEntityWithoutMemoryCount >>)
-->
(<s> ^operator <o> > <o2>)} 

# Move Jewel vs Move Jewel Preferences
sp {moveJewel*moveJewel*less*distance
(state <s> ^attribute operator 
           ^impasse tie
           ^item <o> {<> <o> <o2>}
           ^superstate <ss>)
(<ss> ^io.input-link <il>)
(<ss> ^CREATURE <creature>)                 
(<o> ^name moveJewel)
(<o2> ^name moveJewel)
(<o2> ^parameter.distance <distance2>)
(<o>  ^parameter.distance <distance> <= <distance2>)
-->
(<ss> ^operator <o> > <o2>)} 


# Get Jewel vs Get Jewel Preferences
sp {getJewel*getJewel*preferences
(state <s> ^attribute operator 
           ^impasse tie
           ^item <o> {<> <o> <o2>}
           ^superstate <ss>)        
(<o> ^name getJewel)
(<o2> ^name getJewel)
(<o2> ^parameter.distance <distance2>)
(<o>  ^parameter.distance <distance> <= <distance2>)
-->
(<ss> ^operator <o> > <o2>)} 

# FOOD

# Move Food vs Eat Food
sp {moveFood*eatFood*preferences
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name eatFood)
(<o2> ^name << moveFood moveJewel >>)
-->
(<s> ^operator <o> > <o2>)} 


# Move Food vs Move Food Preferences
sp {moveFood*moveFood*preferences
(state <s> ^attribute operator 
           ^impasse tie
           ^item <o> {<> <o> <o2>}
           ^superstate <ss>)        
(<o> ^name moveFood)
(<o2> ^name moveFood)
(<o2> ^parameter.distance <distance2>)
(<o>  ^parameter.distance <distance> <= <distance2>)
-->
(<ss> ^operator <o> > <o2>)} 

# Eat Food vs Eat Food Preferences
sp {eatFood*eatFood*preferences
(state <s> ^attribute operator 
           ^impasse tie
           ^item <o> {<> <o> <o2>}
           ^superstate <ss>)        
(<o> ^name eatFood)
(<o2> ^name eatFood)
(<o2> ^parameter.distance <distance2>)
(<o>  ^parameter.distance <distance> <= <distance2>)
-->
(<ss> ^operator <o> > <o2>)} 

# FOOD vs JEWEL

# Move Food vs Move Jewel Preferences - Move Food Wins
sp {moveFood*moveJewel*preferences*moveFoodWins
(state <s> ^attribute operator 
           ^impasse tie
           ^item <o> {<> <o> <o2>}
           ^superstate <ss>)
(<ss> ^io.input-link <il>)
(<o> ^name moveFood)
(<o> ^parameterFuel <threshold>)
(<o2> ^name moveJewel)
(<ss> ^CREATURE.SENSOR.FUEL <fuel>)
(<fuel> ^VALUE <value> <= <threshold>)        
-->
(<ss> ^operator <o> > <o2>)} 

# Move Food vs Move Jewel Preferences - Move Jewel Wins
sp {moveFood*moveJewel*preferences*moveJewelWins
(state <s> ^attribute operator 
           ^impasse tie
           ^item <o> {<> <o> <o2>}
           ^superstate <ss>)
(<ss> ^io.input-link <il>)
(<o> ^name moveFood)
(<o> ^parameterFuel <threshold>)
(<o2> ^name moveJewel)
(<ss> ^CREATURE.SENSOR.FUEL <fuel>)
(<fuel> ^VALUE <value> > <threshold>)        
-->
(<ss> ^operator <o2> > <o>)} 

# Move Jewel vs Move Deliver Preferences - Move Deliver Wins
sp {moveFood*moveJewel*preferences*moveJewelWins
(state <s> ^attribute operator 
           ^impasse tie
           ^item <o> {<> <o> <o2>}
           ^superstate <ss>)
(<ss> ^io.input-link <il>)
(<o> ^name moveJewel)
(<o2> ^name moveDeliver)
-->
(<ss> ^operator <o2> > <o>)} 

# Deliver vs Move Deliver Preferences - Deliver Wins
sp {moveFood*moveJewel*preferences*moveJewelWins
(state <s> ^attribute operator 
           ^impasse tie
           ^item <o> {<> <o> <o2>}
           ^superstate <ss>)
(<ss> ^io.input-link <il>)
(<o> ^name moveDeliver)
(<o2> ^name deliverLeaflet)
-->
(<ss> ^operator <o2> > <o>)} 

sp {deliver*deliver*preferences*HigherPaymentWins
(state <s> ^attribute operator 
           ^impasse tie
           ^item <o> {<> <o> <o2>}
           ^superstate <ss>)
(<ss> ^io.input-link <il>)
(<o> ^name deliverLeaflet)
(<o> ^PAYMENT <payment1>)
(<o2> ^name deliverLeaflet)
(<o2> ^PAYMENT <payment2> > <payment1>)
-->
(<ss> ^operator <o2> > <o>)} 


sp {stop*to*send
(state <s> ^attribute operator 
           ^impasse tie
           ^operator <o>
           ^superstate <ss>
           ^send 1)
-->
(<s> ^operator <o> -)} 

# WANDER

# Wander Preferences
sp {wander*preferences
(state <s> ^operator <o> +)
(<o> ^name wander)
-->
(<s> ^operator <o> <)}

sp {halt*condition
  (state <s> ^impasse no-change ^superstate <ss>)
  (<ss> ^io.output-link <ol>)
  (<ol> ^plan <plan>)
  (<plan> ^0 <command>)
  (<command> ^<action> <a>)
-->
  (<ss> ^send 1)
  }      


sp {worst*case
    (state <s> ^impasse no-change ^superstate <ss>)
    (<ss> ^io.output-link <ol>)
    (<ol> ^plan <plan>)
    -(<plan> ^0 <command>)
-->
    (<ol> ^MOVE <command>)
    (<command> ^Vel 0)
    (<command> ^VelR 2)
    (<command> ^VelL 0)
} 

# sp {complete*condition
#   (state <s> ^io.input-link <il>)
#   (<il> ^CREATURE.LEAFLETS <leaflets>)
#   -(<leaflets> ^JEWELS <jewel>)
# -->
# #   (write I2)
# #   (halt)
# #   (interrupt)
# }       